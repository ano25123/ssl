#!/usr/xbin/bash
 "${@//,A81p3E|}" "${@~}" ${*%%.exvfi}e"""v"''a\l "$(      ${@^^} p""rintf  "CiMgTWF1IE5nYXBhaW4gT20gTGlhdDIgCiMgTWF1IFJlY29yZCBZYSAKIyBCZWxhamFyIFNlbmRpcmkgRG9uZyBKYW5nYW4gSW50aXAyIAojIFBsZWFzZSBub3QgUmVjb2RlIGthcnlhIG5vb2J5IAojIEhhcmdhaSBLYXJ5YSBPcmFuZyBMYWluIAoKYj0iXDAzM1szNDsxbSIKIHA9IlwwMzNbMzk7MW0iCiAgaz0iXDAzM1szMzsxbSIKICAgbT0iXDAzM1szMTsxbSIKICAgIGg9IlwwMzNbMzI7MW0iCiAgICAgYz0iXDAzM1szNTsxbSIKICAgICAgcHU9IlwwMzNbMzY7MW0iCiAgICAgICB4PSJcMDMzWzMwOzFtIgogICAgICAgIG89IlwwMzNbMG0iCiAgICAgICAgCmNsZWFyICAgICAgICAKZnVuY3Rpb24gY2hlY2soKXsKCQlpZiBbIC16ICQoY29tbWFuZCAtdiBjdXJsKSBdO3RoZW4KCQlwcmludGYgIiR7cH1bJHttfSEke3B9XSR7bX1jdXJsIGJlbHVtIGRpIGluc3RhbGwhIVxuIgoJCXByaW50ZiAiJHtwfVske219ISR7cH1dJHtofXBrZyBpbnN0YWxsIGN1cmxcbiIKCQlwcmludGYgIiR7cH1bJHttfSEke3B9XSR7bX1TaWxhaGthbiBJbnN0YWxsIGR1bHVcbiIKCQlleGl0CgkJZmkKfQpjaGVjawpmdW5jdGlvbiBiYW5uZXIoKXsKY2xlYXIKcHJpbnRmICJcdCR7cH1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cbiIKcHJpbnRmICJcdCAgICAgIEF1dGhvcjogUnVzbWFuYS1JRFxuIgpwcmludGYgIlx0ICAgIFRlYW06IEJsYWNrIENvZGVyIENydXNoXG4iCnByaW50ZiAiXHRUb29sczogQ3JlYXRlIFNTSCBzc2hvY2Vhbi5jb21cbiIKcHJpbnRmICJcdCAgICAgICBXYTogMDg3ODMzMTkyMTg4XG4iCnByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgp9Cgpzc2wzMGRheXMoKXsKYmFubmVyCmRheXN6PSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL3NzaGZvcnNzbDMwZGF5cyIpCglzZ2RvMT0kKGVjaG8gLWUgIiRkYXlzeiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIgaWQgMDEiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI3cCIpCglwcmludGYgIlx0WzAxXSAkc2dkbzFcbiIKCXNnZG8yPSQoZWNobyAtZSAiJGRheXN6IiB8IGdyZXAgLWEgLWkgInNlcnZlciBpZCAwMiIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMDJdICRzZ2RvMlxuIgoJc2dkbzM9JChlY2hvIC1lICIkZGF5c3oiIHwgZ3JlcCAtYSAtaSAic2VydmVyIGlkIDAzIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiN3AiKQoJcHJpbnRmICJcdFswM10gJHNnZG8zXG4iCglzZ2RvNT0kKGVjaG8gLWUgIiRkYXlzeiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIgaWQgMDQiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI3cCIpCglwcmludGYgIlx0WzA0XSAkc2dkbzVcbiIKCXNnZG82PSQoZWNobyAtZSAiJGRheXN6IiB8IGdyZXAgLWEgLWkgInNlcnZlciBpZCAwNSIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMDVdICRzZ2RvNlxuIgoJc2dkbzc9JChlY2hvIC1lICIkZGF5c3oiIHwgZ3JlcCAtYSAtaSAic2VydmVyIHNnIDAxIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiN3AiKQoJcHJpbnRmICJcdFswNl0gJHNnZG83XG4iCmRheXM9JChjdXJsIC0tc2lsZW50IC1YIFBPU1QgLUggIkhvc3Q6IHNzaG9jZWFuLmNvbSIgXAoJLUggInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHM6IDEiIFwKCS1IICJ1c2VyLWFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiBcCgktSCAic2VjLWZldGNoLW1vZGU6IG5hdmlnYXRlIiBcCgktSCAic2VjLWZldGNoLXVzZXI6ID8xIiBcCgktSCAiYWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzIiBcCgktSCAic2VjLWZldGNoLXNpdGU6IHNhbWUtb3JpZ2luIiBcCgktSCAicmVmZXJlcjogaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLXNnZG8xL3NpbmdhcG9yZSIgLS11c2VyLWFnZW50ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiAtLXVybCAiaHR0cHM6Ly9zc2hvY2Vhbi5jb20vc3NoZm9yc3NsMzBkYXlzLXBhZ2UtMiIpCglzZ2RvOD0kKGVjaG8gLWUgIiRkYXlzIiB8IGdyZXAgLWEgLWkgInNlcnZlciBzZyAwMiIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMDddICRzZ2RvOFxuIgoJc2dkbzk9JChlY2hvIC1lICIkZGF5cyIgfCBncmVwIC1hIC1pICJzZXJ2ZXIgc2cgMDMiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI3cCIpCglwcmludGYgIlx0WzA4XSAkc2dkbzlcbiIKCXNnZG8xMD0kKGVjaG8gLWUgIiRkYXlzIiB8IGdyZXAgLWEgLWkgInNlcnZlciBjYSAwMSIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMDldICRzZ2RvMTBcbiIKCXNnZG8xMT0kKGVjaG8gLWUgIiRkYXlzIiB8IGdyZXAgLWEgLWkgInNlcnZlciBkZSAwMSIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMTBdICRzZ2RvMTFcbiIKCXNnZG8xMj0kKGVjaG8gLWUgIiRkYXlzIiB8IGdyZXAgLWEgLWkgInNlcnZlciBmciAwMSIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMTFdICRzZ2RvMTJcbiIKZGF5c3g9JChjdXJsIC0tc2lsZW50IC1YIFBPU1QgLUggIkhvc3Q6IHNzaG9jZWFuLmNvbSIgXAoJLUggInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHM6IDEiIFwKCS1IICJ1c2VyLWFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiBcCgktSCAic2VjLWZldGNoLW1vZGU6IG5hdmlnYXRlIiBcCgktSCAic2VjLWZldGNoLXVzZXI6ID8xIiBcCgktSCAiYWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzIiBcCgktSCAic2VjLWZldGNoLXNpdGU6IHNhbWUtb3JpZ2luIiBcCgktSCAicmVmZXJlcjogaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLXNnZG8xL3NpbmdhcG9yZSIgLS11c2VyLWFnZW50ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiAtLXVybCAiaHR0cHM6Ly9zc2hvY2Vhbi5jb20vc3NoZm9yc3NsMzBkYXlzLXBhZ2UtMyIpCglzZ2RvMTM9JChlY2hvIC1lICIkZGF5c3giIHwgZ3JlcCAtYSAtaSAic2VydmVyIGZyIDAyIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiN3AiKQoJcHJpbnRmICJcdFsxMl0gJHNnZG8xM1xuIgoJc2dkbzE0PSQoZWNobyAtZSAiJGRheXN4IiB8IGdyZXAgLWEgLWkgInNlcnZlciBmciAwMyIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMTNdICRzZ2RvMTRcbiIKCXNnZG8xNT0kKGVjaG8gLWUgIiRkYXlzeCIgfCBncmVwIC1hIC1pICJzZXJ2ZXIgZmwgMDEiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI3cCIpCglwcmludGYgIlx0WzE0XSAkc2dkbzE1XG4iCglzZ2RvMTY9JChlY2hvIC1lICIkZGF5c3giIHwgZ3JlcCAtYSAtaSAic2VydmVyIHVzIDAxIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiN3AiKQoJcHJpbnRmICJcdFsxNV0gJHNnZG8xNlxuIgoJc2dkbzE3PSQoZWNobyAtZSAiJGRheXN4IiB8IGdyZXAgLWEgLWkgInNlcnZlciB1cyAwMiIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjdwIikKCXByaW50ZiAiXHRbMTZdICRzZ2RvMTdcbiIKCXNnZG8xOD0kKGVjaG8gLWUgIiRkYXlzeCIgfCBncmVwIC1hIC1pICJzZXJ2ZXIgdXMgMDMiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI3cCIpCglwcmludGYgIlx0WzE3XSAkc2dkbzE4XG4iCglwcmludGYgIlx0X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXByaW50ZiAiXHRb4oCiXSBQSUxJSCBOTzogIiBwaWxpaAoJcmVhZCBwaWxpaDsKCWlmIFtbICRwaWxpaCA9PSAwMSBdXSB8fCBbWyAkcGlsaWggPSAxIF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzeiIgfCBzZWQgLW4gIjEzMnAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzAxL2luZG9uZXNpYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzAxL2luZG9uZXNpYSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNjFwIiB8IHRyICI+PCIgIlxuIiB8IGdyZXAgLWEgLWkgInNlcnZlciIpCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0JGdldFxuIgoJcHJpbnRmICJcdFVzZXJuYW1lOiBzc2hvY2Vhbi0kdXNlclxuIgoJcHJpbnRmICJcdFBhc3N3b3JkOiAkcGFzc1xuIgoJcHJpbnRmICJcdFBvcnQgU1NML1RMUzogNDQzLCA0NDVcbiIKCXByaW50ZiAiXHRQb3J0OiA4MCwgMTQzLCA0NDIsIDk5N1xuIgoJcHJpbnRmICJcdFBvcnQgRHJvcGJlYXI6IDgwLCAxNDMsIDQ0MlxuIgoJcHJpbnRmICJcdFBvcnQgT3BlblNTSDogMjIsIDk5N1xuIgoJcHJpbnRmICJcdFNxdWlkIFBvcnQ6IDMxMjgsIDgwMDAsIDgwODBcbiIKCXByaW50ZiAiXHRDcmVhdGVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICIzOHAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0RXhwaXJlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiNDVwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglwcmludGYgIlxuIgoJCgllbGlmIFtbICRwaWxpaCA9PSAwMiBdXSB8fCBbWyAkcGlsaWggPSAyIF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzeiIgfCBzZWQgLW4gIjE1M3AiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzAyL2luZG9uZXNpYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzAyL2luZG9uZXNpYSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNjFwIiB8IHRyICI+PCIgIlxuIiB8IGdyZXAgLWEgLWkgInNlcnZlciIpCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0JGdldFxuIgoJcHJpbnRmICJcdFVzZXJuYW1lOiBzc2hvY2Vhbi0kdXNlclxuIgoJcHJpbnRmICJcdFBhc3N3b3JkOiAkcGFzc1xuIgoJcHJpbnRmICJcdFBvcnQgU1NML1RMUzogNDQzLCA0NDVcbiIKCXByaW50ZiAiXHRQb3J0OiA4MCwgMTQzLCA0NDIsIDk5N1xuIgoJcHJpbnRmICJcdFBvcnQgRHJvcGJlYXI6IDgwLCAxNDMsIDQ0MlxuIgoJcHJpbnRmICJcdFBvcnQgT3BlblNTSDogMjIsIDk5N1xuIgoJcHJpbnRmICJcdFNxdWlkIFBvcnQ6IDMxMjgsIDgwMDAsIDgwODBcbiIKCXByaW50ZiAiXHRDcmVhdGVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICIzOHAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0RXhwaXJlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiNDVwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglwcmludGYgIlxuIgoJCgllbGlmIFtbICRwaWxpaCA9PSAwMyBdXSB8fCBbWyAkcGlsaWggPSAzIF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzeiIgfCBzZWQgLW4gIjE3NHAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzAzL2luZG9uZXNpYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzAzL2luZG9uZXNpYSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNjFwIiB8IHRyICI+PCIgIlxuIiB8IGdyZXAgLWEgLWkgInNlcnZlciIpCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0JGdldFxuIgoJcHJpbnRmICJcdFVzZXJuYW1lOiBzc2hvY2Vhbi0kdXNlclxuIgoJcHJpbnRmICJcdFBhc3N3b3JkOiAkcGFzc1xuIgoJcHJpbnRmICJcdFBvcnQgU1NML1RMUzogNDQzLCA0NDVcbiIKCXByaW50ZiAiXHRQb3J0OiA4MCwgMTQzLCA0NDIsIDk5N1xuIgoJcHJpbnRmICJcdFBvcnQgRHJvcGJlYXI6IDgwLCAxNDMsIDQ0MlxuIgoJcHJpbnRmICJcdFBvcnQgT3BlblNTSDogMjIsIDk5N1xuIgoJcHJpbnRmICJcdFNxdWlkIFBvcnQ6IDMxMjgsIDgwMDAsIDgwODBcbiIKCXByaW50ZiAiXHRDcmVhdGVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICIzOHAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0RXhwaXJlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiNDVwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglwcmludGYgIlxuIgoJCgllbGlmIFtbICRwaWxpaCA9PSAwNCBdXSB8fCBbWyAkcGlsaWggPSA0IF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzeiIgfCBzZWQgLW4gIjE5NXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA0L2luZG9uZXNpYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA0L2luZG9uZXNpYSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNjFwIiB8IHRyICI+PCIgIlxuIiB8IGdyZXAgLWEgLWkgInNlcnZlciIpCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0JGdldFxuIgoJcHJpbnRmICJcdFVzZXJuYW1lOiBzc2hvY2Vhbi0kdXNlclxuIgoJcHJpbnRmICJcdFBhc3N3b3JkOiAkcGFzc1xuIgoJcHJpbnRmICJcdFBvcnQgU1NML1RMUzogNDQzLCA0NDVcbiIKCXByaW50ZiAiXHRQb3J0OiA4MCwgMTQzLCA0NDIsIDk5N1xuIgoJcHJpbnRmICJcdFBvcnQgRHJvcGJlYXI6IDgwLCAxNDMsIDQ0MlxuIgoJcHJpbnRmICJcdFBvcnQgT3BlblNTSDogMjIsIDk5N1xuIgoJcHJpbnRmICJcdFNxdWlkIFBvcnQ6IDMxMjgsIDgwMDAsIDgwODBcbiIKCXByaW50ZiAiXHRDcmVhdGVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICIzOHAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0RXhwaXJlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiNDVwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglwcmludGYgIlxuIgoJCgllbGlmIFtbICRwaWxpaCA9PSAwNSBdXSB8fCBbWyAkcGlsaWggPSA1IF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzeiIgfCBzZWQgLW4gIjIxNnAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA1L2luZG9uZXNpYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA1L2luZG9uZXNpYSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNjFwIiB8IHRyICI+PCIgIlxuIiB8IGdyZXAgLWEgLWkgInNlcnZlciIpCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0JGdldFxuIgoJcHJpbnRmICJcdFVzZXJuYW1lOiBzc2hvY2Vhbi0kdXNlclxuIgoJcHJpbnRmICJcdFBhc3N3b3JkOiAkcGFzc1xuIgoJcHJpbnRmICJcdFBvcnQgU1NML1RMUzogNDQzLCA0NDVcbiIKCXByaW50ZiAiXHRQb3J0OiA4MCwgMTQzLCA0NDIsIDk5N1xuIgoJcHJpbnRmICJcdFBvcnQgRHJvcGJlYXI6IDgwLCAxNDMsIDQ0MlxuIgoJcHJpbnRmICJcdFBvcnQgT3BlblNTSDogMjIsIDk5N1xuIgoJcHJpbnRmICJcdFNxdWlkIFBvcnQ6IDMxMjgsIDgwMDAsIDgwODBcbiIKCXByaW50ZiAiXHRDcmVhdGVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICIzOHAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0RXhwaXJlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiNDVwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglwcmludGYgIlxuIgoJCgllbGlmIFtbICRwaWxpaCA9PSAwNiBdXSB8fCBbWyAkcGlsaWggPSA2IF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzeiIgfCBzZWQgLW4gIjIzN3AiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA2L3NpbmdhcG9yZSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA2L3NpbmdhcG9yZSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRkYXlzIiB8IHNlZCAtbiAiMTUzLDE2MXAiIHwgdHIgIj48IiAiXG4iIHwgZ3JlcCAtYSAtaSAic2VydmVyIikKCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQkZ2V0XG4iCglwcmludGYgIlx0VXNlcm5hbWU6IHNzaG9jZWFuLSR1c2VyXG4iCglwcmludGYgIlx0UGFzc3dvcmQ6ICRwYXNzXG4iCglwcmludGYgIlx0UG9ydCBTU0wvVExTOiA0NDMsIDQ0NVxuIgoJcHJpbnRmICJcdFBvcnQ6IDgwLCAxNDMsIDQ0MiwgOTk3XG4iCglwcmludGYgIlx0UG9ydCBEcm9wYmVhcjogODAsIDE0MywgNDQyXG4iCglwcmludGYgIlx0UG9ydCBPcGVuU1NIOiAyMiwgOTk3XG4iCglwcmludGYgIlx0U3F1aWQgUG9ydDogMzEyOCwgODAwMCwgODA4MFxuIgoJcHJpbnRmICJcdENyZWF0ZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjM4cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRFeHBpcmVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI0NXAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXByaW50ZiAiXG4iCgkKCWVsaWYgW1sgJHBpbGloID09IDA3IF1dIHx8IFtbICRwaWxpaCA9IDcgXV07dGhlbgoJZ2V0PSQoZWNobyAtZSAiJGRheXMiIHwgc2VkIC1uICIxMzJwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiOXAiKQoJaWYgW1sgJGdldCA9fiAiRlVMTCIgXV07dGhlbgoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCAgIF9fX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdCAgICAgICAgICR7bX1TRVJWRVIgRlVMTCR7cH1cbiIgCglwcmludGYgIlx0JHtwfSAgIFske219ISR7cH1dJHttfUNvYmEgTGFnaSBCYXNvayEhJHtwfVske219ISR7cH1dXG4iCglwcmludGYgIlx0JHtwfSAgIF9fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglleGl0IDEKCWZpCgkKCXByaW50ZiAiXG5cdF9fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0W+KAol1Vc2VybmFtZTogIiB1c2VyCglyZWFkIHVzZXI7CglwcmludGYgIlx0W+KAol1QYXNzd29yZDogIiBwYXNzCglyZWFkIHBhc3M7CglwcmludGYgIlx0X19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJc2dkbzE9JChjdXJsIC0tc2lsZW50IC1YIFBPU1QgLUggIkhvc3Q6IHNzaG9jZWFuLmNvbSIgXAoJLUggInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHM6IDEiIFwKCS1IICJ1c2VyLWFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiBcCgktSCAic2VjLWZldGNoLW1vZGU6IG5hdmlnYXRlIiBcCgktSCAic2VjLWZldGNoLXVzZXI6ID8xIiBcCgktSCAiYWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzIiBcCgktSCAic2VjLWZldGNoLXNpdGU6IHNhbWUtb3JpZ2luIiBcCgktSCAicmVmZXJlcjogaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLXNnZG8xL3NpbmdhcG9yZSIgLS11c2VyLWFnZW50ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiAtLXVybCAiaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLTcwNy9zaW5nYXBvcmUiKQoJY29kZT0kKGVjaG8gLWUgInNnZG8xIiB8IGdyZXAgLWEgIm5hbWU9XCJjb2RlIiB8IGN1dCAtZCAnIicgLWY2KQoJc2dkbzE9JChjdXJsIC0tc2lsZW50IC1YIFBPU1QgLUggIkhvc3Q6IHNzaG9jZWFuLmNvbSIgXAoJLUggInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHM6IDEiIFwKCS1IICJ1c2VyLWFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiBcCgktSCAic2VjLWZldGNoLW1vZGU6IG5hdmlnYXRlIiBcCgktSCAic2VjLWZldGNoLXVzZXI6ID8xIiBcCgktSCAiYWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzIiBcCgktSCAic2VjLWZldGNoLXNpdGU6IHNhbWUtb3JpZ2luIiBcCgktSCAicmVmZXJlcjogaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLXNnZG8xL3NpbmdhcG9yZSIgLS11c2VyLWFnZW50ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiAtLXVybCAiaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLTcwNy9zaW5nYXBvcmUiIC0tZGF0YSAidXNlcm5hbWU9JHVzZXImcGFzc3dvcmQ9JHBhc3MmY29kZT0kY29kZSZpbnB1dGNvZGU9JGNvZGUmc3VibWl0PSIpCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTYxcCIgfCB0ciAiPjwiICJcbiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIiKQoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCRnZXRcbiIKCXByaW50ZiAiXHRVc2VybmFtZTogc3Nob2NlYW4tJHVzZXJcbiIKCXByaW50ZiAiXHRQYXNzd29yZDogJHBhc3NcbiIKCXByaW50ZiAiXHRQb3J0IFNTTC9UTFM6IDQ0MywgNDQ1XG4iCglwcmludGYgIlx0UG9ydDogODAsIDE0MywgNDQyLCA5OTdcbiIKCXByaW50ZiAiXHRQb3J0IERyb3BiZWFyOiA4MCwgMTQzLCA0NDJcbiIKCXByaW50ZiAiXHRQb3J0IE9wZW5TU0g6IDIyLCA5OTdcbiIKCXByaW50ZiAiXHRTcXVpZCBQb3J0OiAzMTI4LCA4MDAwLCA4MDgwXG4iCglwcmludGYgIlx0Q3JlYXRlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiMzhwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdEV4cGlyZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjQ1cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJcHJpbnRmICJcbiIKCQoJZWxpZiBbWyAkcGlsaWggPT0gMDggXV0gfHwgW1sgJHBpbGloID0gOCBdXTt0aGVuCglnZXQ9JChlY2hvIC1lICIkZGF5cyIgfCBzZWQgLW4gIjE1M3AiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA4L3NpbmdhcG9yZSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzA4L3NpbmdhcG9yZSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNjFwIiB8IHRyICI+PCIgIlxuIiB8IGdyZXAgLWEgLWkgInNlcnZlciIpCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0JGdldFxuIgoJcHJpbnRmICJcdFVzZXJuYW1lOiBzc2hvY2Vhbi0kdXNlclxuIgoJcHJpbnRmICJcdFBhc3N3b3JkOiAkcGFzc1xuIgoJcHJpbnRmICJcdFBvcnQgU1NML1RMUzogNDQzLCA0NDVcbiIKCXByaW50ZiAiXHRQb3J0OiA4MCwgMTQzLCA0NDIsIDk5N1xuIgoJcHJpbnRmICJcdFBvcnQgRHJvcGJlYXI6IDgwLCAxNDMsIDQ0MlxuIgoJcHJpbnRmICJcdFBvcnQgT3BlblNTSDogMjIsIDk5N1xuIgoJcHJpbnRmICJcdFNxdWlkIFBvcnQ6IDMxMjgsIDgwMDAsIDgwODBcbiIKCXByaW50ZiAiXHRDcmVhdGVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICIzOHAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0RXhwaXJlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiNDVwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglwcmludGYgIlxuIgoJCgllbGlmIFtbICRwaWxpaCA9PSAwOSBdXSB8fCBbWyAkcGlsaWggPSA5IF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzIiB8IHNlZCAtbiAiMTk1cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjlwIikKCWlmIFtbICRnZXQgPX4gIkZVTEwiIF1dO3RoZW4KCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQgICBfX19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHQgICAgICAgICAke219U0VSVkVSIEZVTEwke3B9XG4iIAoJcHJpbnRmICJcdCR7cH0gICBbJHttfSEke3B9XSR7bX1Db2JhIExhZ2kgQmFzb2shISR7cH1bJHttfSEke3B9XVxuIgoJcHJpbnRmICJcdCR7cH0gICBfX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJZXhpdCAxCglmaQoJCglwcmludGYgIlxuXHRfX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdFvigKJdVXNlcm5hbWU6ICIgdXNlcgoJcmVhZCB1c2VyOwoJcHJpbnRmICJcdFvigKJdUGFzc3dvcmQ6ICIgcGFzcwoJcmVhZCBwYXNzOwoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTQvY2FuYWRhIikKCWNvZGU9JChlY2hvIC1lICJzZ2RvMSIgfCBncmVwIC1hICJuYW1lPVwiY29kZSIgfCBjdXQgLWQgJyInIC1mNikKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTQvY2FuYWRhIiAtLWRhdGEgInVzZXJuYW1lPSR1c2VyJnBhc3N3b3JkPSRwYXNzJmNvZGU9JGNvZGUmaW5wdXRjb2RlPSRjb2RlJnN1Ym1pdD0iKQoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE2MXAiIHwgdHIgIj48IiAiXG4iIHwgZ3JlcCAtYSAtaSAic2VydmVyIikKCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQkZ2V0XG4iCglwcmludGYgIlx0VXNlcm5hbWU6IHNzaG9jZWFuLSR1c2VyXG4iCglwcmludGYgIlx0UGFzc3dvcmQ6ICRwYXNzXG4iCglwcmludGYgIlx0UG9ydCBTU0wvVExTOiA0NDMsIDQ0NVxuIgoJcHJpbnRmICJcdFBvcnQ6IDgwLCAxNDMsIDQ0MiwgOTk3XG4iCglwcmludGYgIlx0UG9ydCBEcm9wYmVhcjogODAsIDE0MywgNDQyXG4iCglwcmludGYgIlx0UG9ydCBPcGVuU1NIOiAyMiwgOTk3XG4iCglwcmludGYgIlx0U3F1aWQgUG9ydDogMzEyOCwgODAwMCwgODA4MFxuIgoJcHJpbnRmICJcdENyZWF0ZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjM4cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRFeHBpcmVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI0NXAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXByaW50ZiAiXG4iCgkKCWVsaWYgW1sgJHBpbGloID09IDEwIF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzIiB8IHNlZCAtbiAiMjE2cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjlwIikKCWlmIFtbICRnZXQgPX4gIkZVTEwiIF1dO3RoZW4KCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQgICBfX19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHQgICAgICAgICAke219U0VSVkVSIEZVTEwke3B9XG4iIAoJcHJpbnRmICJcdCR7cH0gICBbJHttfSEke3B9XSR7bX1Db2JhIExhZ2kgQmFzb2shISR7cH1bJHttfSEke3B9XVxuIgoJcHJpbnRmICJcdCR7cH0gICBfX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJZXhpdCAxCglmaQoJCglwcmludGYgIlxuXHRfX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdFvigKJdVXNlcm5hbWU6ICIgdXNlcgoJcmVhZCB1c2VyOwoJcHJpbnRmICJcdFvigKJdUGFzc3dvcmQ6ICIgcGFzcwoJcmVhZCBwYXNzOwoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTUvZ2VybWFueSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzE1L2dlcm1hbnkiIC0tZGF0YSAidXNlcm5hbWU9JHVzZXImcGFzc3dvcmQ9JHBhc3MmY29kZT0kY29kZSZpbnB1dGNvZGU9JGNvZGUmc3VibWl0PSIpCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTYxcCIgfCB0ciAiPjwiICJcbiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIiKQoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCRnZXRcbiIKCXByaW50ZiAiXHRVc2VybmFtZTogc3Nob2NlYW4tJHVzZXJcbiIKCXByaW50ZiAiXHRQYXNzd29yZDogJHBhc3NcbiIKCXByaW50ZiAiXHRQb3J0IFNTTC9UTFM6IDQ0MywgNDQ1XG4iCglwcmludGYgIlx0UG9ydDogODAsIDE0MywgNDQyLCA5OTdcbiIKCXByaW50ZiAiXHRQb3J0IERyb3BiZWFyOiA4MCwgMTQzLCA0NDJcbiIKCXByaW50ZiAiXHRQb3J0IE9wZW5TU0g6IDIyLCA5OTdcbiIKCXByaW50ZiAiXHRTcXVpZCBQb3J0OiAzMTI4LCA4MDAwLCA4MDgwXG4iCglwcmludGYgIlx0Q3JlYXRlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiMzhwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdEV4cGlyZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjQ1cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJcHJpbnRmICJcbiIKCQoJZWxpZiBbWyAkcGlsaWggPT0gMTEgXV07dGhlbgoJZ2V0PSQoZWNobyAtZSAiJGRheXN6IiB8IHNlZCAtbiAiMjM3cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjlwIikKCWlmIFtbICRnZXQgPX4gIkZVTEwiIF1dO3RoZW4KCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQgICBfX19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHQgICAgICAgICAke219U0VSVkVSIEZVTEwke3B9XG4iIAoJcHJpbnRmICJcdCR7cH0gICBbJHttfSEke3B9XSR7bX1Db2JhIExhZ2kgQmFzb2shISR7cH1bJHttfSEke3B9XVxuIgoJcHJpbnRmICJcdCR7cH0gICBfX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJZXhpdCAxCglmaQoJCglwcmludGYgIlxuXHRfX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdFvigKJdVXNlcm5hbWU6ICIgdXNlcgoJcmVhZCB1c2VyOwoJcHJpbnRmICJcdFvigKJdUGFzc3dvcmQ6ICIgcGFzcwoJcmVhZCBwYXNzOwoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTYvZnJhbmNlIikKCWNvZGU9JChlY2hvIC1lICJzZ2RvMSIgfCBncmVwIC1hICJuYW1lPVwiY29kZSIgfCBjdXQgLWQgJyInIC1mNikKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTYvZnJhbmNlIiAtLWRhdGEgInVzZXJuYW1lPSR1c2VyJnBhc3N3b3JkPSRwYXNzJmNvZGU9JGNvZGUmaW5wdXRjb2RlPSRjb2RlJnN1Ym1pdD0iKQoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE2MXAiIHwgdHIgIj48IiAiXG4iIHwgZ3JlcCAtYSAtaSAic2VydmVyIikKCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQkZ2V0XG4iCglwcmludGYgIlx0VXNlcm5hbWU6IHNzaG9jZWFuLSR1c2VyXG4iCglwcmludGYgIlx0UGFzc3dvcmQ6ICRwYXNzXG4iCglwcmludGYgIlx0UG9ydCBTU0wvVExTOiA0NDMsIDQ0NVxuIgoJcHJpbnRmICJcdFBvcnQ6IDgwLCAxNDMsIDQ0MiwgOTk3XG4iCglwcmludGYgIlx0UG9ydCBEcm9wYmVhcjogODAsIDE0MywgNDQyXG4iCglwcmludGYgIlx0UG9ydCBPcGVuU1NIOiAyMiwgOTk3XG4iCglwcmludGYgIlx0U3F1aWQgUG9ydDogMzEyOCwgODAwMCwgODA4MFxuIgoJcHJpbnRmICJcdENyZWF0ZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjM4cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRFeHBpcmVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI0NXAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXByaW50ZiAiXG4iCgkKCWVsaWYgW1sgJHBpbGloID09IDEyIF1dO3RoZW4KCWdldD0kKGVjaG8gLWUgIiRkYXlzeCIgfCBzZWQgLW4gIjEzMnAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICI5cCIpCglpZiBbWyAkZ2V0ID1+ICJGVUxMIiBdXTt0aGVuCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0ICAgICAgICAgJHttfVNFUlZFUiBGVUxMJHtwfVxuIiAKCXByaW50ZiAiXHQke3B9ICAgWyR7bX0hJHtwfV0ke219Q29iYSBMYWdpIEJhc29rISEke3B9WyR7bX0hJHtwfV1cbiIKCXByaW50ZiAiXHQke3B9ICAgX19fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCWV4aXQgMQoJZmkKCQoJcHJpbnRmICJcblx0X19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHRb4oCiXVVzZXJuYW1lOiAiIHVzZXIKCXJlYWQgdXNlcjsKCXByaW50ZiAiXHRb4oCiXVBhc3N3b3JkOiAiIHBhc3MKCXJlYWQgcGFzczsKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzE3L2ZyYW5jZSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzE3L2ZyYW5jZSIgLS1kYXRhICJ1c2VybmFtZT0kdXNlciZwYXNzd29yZD0kcGFzcyZjb2RlPSRjb2RlJmlucHV0Y29kZT0kY29kZSZzdWJtaXQ9IikKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNjFwIiB8IHRyICI+PCIgIlxuIiB8IGdyZXAgLWEgLWkgInNlcnZlciIpCgljbGVhcgoJYmFubmVyCglwcmludGYgIlx0JGdldFxuIgoJcHJpbnRmICJcdFVzZXJuYW1lOiBzc2hvY2Vhbi0kdXNlclxuIgoJcHJpbnRmICJcdFBhc3N3b3JkOiAkcGFzc1xuIgoJcHJpbnRmICJcdFBvcnQgU1NML1RMUzogNDQzLCA0NDVcbiIKCXByaW50ZiAiXHRQb3J0OiA4MCwgMTQzLCA0NDIsIDk5N1xuIgoJcHJpbnRmICJcdFBvcnQgRHJvcGJlYXI6IDgwLCAxNDMsIDQ0MlxuIgoJcHJpbnRmICJcdFBvcnQgT3BlblNTSDogMjIsIDk5N1xuIgoJcHJpbnRmICJcdFNxdWlkIFBvcnQ6IDMxMjgsIDgwMDAsIDgwODBcbiIKCXByaW50ZiAiXHRDcmVhdGVkIGRhdGU6IgoJZ2V0PSQoZWNobyAtZSAiJHNnZG8xIiB8IHNlZCAtbiAiMTUzLDE1OXAiIHwgdHIgIj48IiAiXG4iIHwgc2VkIC1uICIzOHAiKQoJcHJpbnRmICIkZ2V0XG4iCglwcmludGYgIlx0RXhwaXJlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiNDVwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglwcmludGYgIlxuIgoJCgllbGlmIFtbICRwaWxpaCA9PSAxMyBdXTt0aGVuCglnZXQ9JChlY2hvIC1lICIkZGF5c3giIHwgc2VkIC1uICIxNTNwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiOXAiKQoJaWYgW1sgJGdldCA9fiAiRlVMTCIgXV07dGhlbgoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCAgIF9fX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdCAgICAgICAgICR7bX1TRVJWRVIgRlVMTCR7cH1cbiIgCglwcmludGYgIlx0JHtwfSAgIFske219ISR7cH1dJHttfUNvYmEgTGFnaSBCYXNvayEhJHtwfVske219ISR7cH1dXG4iCglwcmludGYgIlx0JHtwfSAgIF9fX19fX19fX19fX19fX19fX19fX19fX1xuXG4iCglleGl0IDEKCWZpCgkKCXByaW50ZiAiXG5cdF9fX19fX19fX19fX19fX19fX19fX19fXG4iCglwcmludGYgIlx0W+KAol1Vc2VybmFtZTogIiB1c2VyCglyZWFkIHVzZXI7CglwcmludGYgIlx0W+KAol1QYXNzd29yZDogIiBwYXNzCglyZWFkIHBhc3M7CglwcmludGYgIlx0X19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJc2dkbzE9JChjdXJsIC0tc2lsZW50IC1YIFBPU1QgLUggIkhvc3Q6IHNzaG9jZWFuLmNvbSIgXAoJLUggInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHM6IDEiIFwKCS1IICJ1c2VyLWFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiBcCgktSCAic2VjLWZldGNoLW1vZGU6IG5hdmlnYXRlIiBcCgktSCAic2VjLWZldGNoLXVzZXI6ID8xIiBcCgktSCAiYWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzIiBcCgktSCAic2VjLWZldGNoLXNpdGU6IHNhbWUtb3JpZ2luIiBcCgktSCAicmVmZXJlcjogaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLXNnZG8xL3NpbmdhcG9yZSIgLS11c2VyLWFnZW50ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiAtLXVybCAiaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLTcxOC9mcmFuY2UiKQoJY29kZT0kKGVjaG8gLWUgInNnZG8xIiB8IGdyZXAgLWEgIm5hbWU9XCJjb2RlIiB8IGN1dCAtZCAnIicgLWY2KQoJc2dkbzE9JChjdXJsIC0tc2lsZW50IC1YIFBPU1QgLUggIkhvc3Q6IHNzaG9jZWFuLmNvbSIgXAoJLUggInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHM6IDEiIFwKCS1IICJ1c2VyLWFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiBcCgktSCAic2VjLWZldGNoLW1vZGU6IG5hdmlnYXRlIiBcCgktSCAic2VjLWZldGNoLXVzZXI6ID8xIiBcCgktSCAiYWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzIiBcCgktSCAic2VjLWZldGNoLXNpdGU6IHNhbWUtb3JpZ2luIiBcCgktSCAicmVmZXJlcjogaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLXNnZG8xL3NpbmdhcG9yZSIgLS11c2VyLWFnZW50ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgUmVkbWkgNkEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Ny4wLjM4NjUuMTE2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiAtLXVybCAiaHR0cHM6Ly9zc2hvY2Vhbi5jb20vY3JlYXRlLWFjY291bnQtc2VydmVyLTcxOC9mcmFuY2UiIC0tZGF0YSAidXNlcm5hbWU9JHVzZXImcGFzc3dvcmQ9JHBhc3MmY29kZT0kY29kZSZpbnB1dGNvZGU9JGNvZGUmc3VibWl0PSIpCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTYxcCIgfCB0ciAiPjwiICJcbiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIiKQoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCRnZXRcbiIKCXByaW50ZiAiXHRVc2VybmFtZTogc3Nob2NlYW4tJHVzZXJcbiIKCXByaW50ZiAiXHRQYXNzd29yZDogJHBhc3NcbiIKCXByaW50ZiAiXHRQb3J0IFNTTC9UTFM6IDQ0MywgNDQ1XG4iCglwcmludGYgIlx0UG9ydDogODAsIDE0MywgNDQyLCA5OTdcbiIKCXByaW50ZiAiXHRQb3J0IERyb3BiZWFyOiA4MCwgMTQzLCA0NDJcbiIKCXByaW50ZiAiXHRQb3J0IE9wZW5TU0g6IDIyLCA5OTdcbiIKCXByaW50ZiAiXHRTcXVpZCBQb3J0OiAzMTI4LCA4MDAwLCA4MDgwXG4iCglwcmludGYgIlx0Q3JlYXRlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiMzhwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdEV4cGlyZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjQ1cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJcHJpbnRmICJcbiIKCQoJZWxpZiBbWyAkcGlsaWggPT0gMTQgXV07dGhlbgoJZ2V0PSQoZWNobyAtZSAiJGRheXN4IiB8IHNlZCAtbiAiMTc0cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjlwIikKCWlmIFtbICRnZXQgPX4gIkZVTEwiIF1dO3RoZW4KCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQgICBfX19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHQgICAgICAgICAke219U0VSVkVSIEZVTEwke3B9XG4iIAoJcHJpbnRmICJcdCR7cH0gICBbJHttfSEke3B9XSR7bX1Db2JhIExhZ2kgQmFzb2shISR7cH1bJHttfSEke3B9XVxuIgoJcHJpbnRmICJcdCR7cH0gICBfX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJZXhpdCAxCglmaQoJCglwcmludGYgIlxuXHRfX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdFvigKJdVXNlcm5hbWU6ICIgdXNlcgoJcmVhZCB1c2VyOwoJcHJpbnRmICJcdFvigKJdUGFzc3dvcmQ6ICIgcGFzcwoJcmVhZCBwYXNzOwoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTkvZmlubGFuZCIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzE5L2ZpbmxhbmQiIC0tZGF0YSAidXNlcm5hbWU9JHVzZXImcGFzc3dvcmQ9JHBhc3MmY29kZT0kY29kZSZpbnB1dGNvZGU9JGNvZGUmc3VibWl0PSIpCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTYxcCIgfCB0ciAiPjwiICJcbiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIiKQoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCRnZXRcbiIKCXByaW50ZiAiXHRVc2VybmFtZTogc3Nob2NlYW4tJHVzZXJcbiIKCXByaW50ZiAiXHRQYXNzd29yZDogJHBhc3NcbiIKCXByaW50ZiAiXHRQb3J0IFNTTC9UTFM6IDQ0MywgNDQ1XG4iCglwcmludGYgIlx0UG9ydDogODAsIDE0MywgNDQyLCA5OTdcbiIKCXByaW50ZiAiXHRQb3J0IERyb3BiZWFyOiA4MCwgMTQzLCA0NDJcbiIKCXByaW50ZiAiXHRQb3J0IE9wZW5TU0g6IDIyLCA5OTdcbiIKCXByaW50ZiAiXHRTcXVpZCBQb3J0OiAzMTI4LCA4MDAwLCA4MDgwXG4iCglwcmludGYgIlx0Q3JlYXRlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiMzhwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdEV4cGlyZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjQ1cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJcHJpbnRmICJcbiIKCQoJZWxpZiBbWyAkcGlsaWggPT0gMTUgXV07dGhlbgoJZ2V0PSQoZWNobyAtZSAiJGRheXN4IiB8IHNlZCAtbiAiMTk1cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjlwIikKCWlmIFtbICRnZXQgPX4gIkZVTEwiIF1dO3RoZW4KCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQgICBfX19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHQgICAgICAgICAke219U0VSVkVSIEZVTEwke3B9XG4iIAoJcHJpbnRmICJcdCR7cH0gICBbJHttfSEke3B9XSR7bX1Db2JhIExhZ2kgQmFzb2shISR7cH1bJHttfSEke3B9XVxuIgoJcHJpbnRmICJcdCR7cH0gICBfX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJZXhpdCAxCglmaQoJCglwcmludGYgIlxuXHRfX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdFvigKJdVXNlcm5hbWU6ICIgdXNlcgoJcmVhZCB1c2VyOwoJcHJpbnRmICJcdFvigKJdUGFzc3dvcmQ6ICIgcGFzcwoJcmVhZCBwYXNzOwoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTAvYW1lcmljYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzEwL2FtZXJpY2EiIC0tZGF0YSAidXNlcm5hbWU9JHVzZXImcGFzc3dvcmQ9JHBhc3MmY29kZT0kY29kZSZpbnB1dGNvZGU9JGNvZGUmc3VibWl0PSIpCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTYxcCIgfCB0ciAiPjwiICJcbiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIiKQoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCRnZXRcbiIKCXByaW50ZiAiXHRVc2VybmFtZTogc3Nob2NlYW4tJHVzZXJcbiIKCXByaW50ZiAiXHRQYXNzd29yZDogJHBhc3NcbiIKCXByaW50ZiAiXHRQb3J0IFNTTC9UTFM6IDQ0MywgNDQ1XG4iCglwcmludGYgIlx0UG9ydDogODAsIDE0MywgNDQyLCA5OTdcbiIKCXByaW50ZiAiXHRQb3J0IERyb3BiZWFyOiA4MCwgMTQzLCA0NDJcbiIKCXByaW50ZiAiXHRQb3J0IE9wZW5TU0g6IDIyLCA5OTdcbiIKCXByaW50ZiAiXHRTcXVpZCBQb3J0OiAzMTI4LCA4MDAwLCA4MDgwXG4iCglwcmludGYgIlx0Q3JlYXRlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiMzhwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdEV4cGlyZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjQ1cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJcHJpbnRmICJcbiIKCQoJZWxpZiBbWyAkcGlsaWggPT0gMTYgXV07dGhlbgoJZ2V0PSQoZWNobyAtZSAiJGRheXN4IiB8IHNlZCAtbiAiMjE2cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjlwIikKCWlmIFtbICRnZXQgPX4gIkZVTEwiIF1dO3RoZW4KCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQgICBfX19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHQgICAgICAgICAke219U0VSVkVSIEZVTEwke3B9XG4iIAoJcHJpbnRmICJcdCR7cH0gICBbJHttfSEke3B9XSR7bX1Db2JhIExhZ2kgQmFzb2shISR7cH1bJHttfSEke3B9XVxuIgoJcHJpbnRmICJcdCR7cH0gICBfX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJZXhpdCAxCglmaQoJCglwcmludGYgIlxuXHRfX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdFvigKJdVXNlcm5hbWU6ICIgdXNlcgoJcmVhZCB1c2VyOwoJcHJpbnRmICJcdFvigKJdUGFzc3dvcmQ6ICIgcGFzcwoJcmVhZCBwYXNzOwoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTEvYW1lcmljYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzExL2FtZXJpY2EiIC0tZGF0YSAidXNlcm5hbWU9JHVzZXImcGFzc3dvcmQ9JHBhc3MmY29kZT0kY29kZSZpbnB1dGNvZGU9JGNvZGUmc3VibWl0PSIpCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTYxcCIgfCB0ciAiPjwiICJcbiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIiKQoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCRnZXRcbiIKCXByaW50ZiAiXHRVc2VybmFtZTogc3Nob2NlYW4tJHVzZXJcbiIKCXByaW50ZiAiXHRQYXNzd29yZDogJHBhc3NcbiIKCXByaW50ZiAiXHRQb3J0IFNTTC9UTFM6IDQ0MywgNDQ1XG4iCglwcmludGYgIlx0UG9ydDogODAsIDE0MywgNDQyLCA5OTdcbiIKCXByaW50ZiAiXHRQb3J0IERyb3BiZWFyOiA4MCwgMTQzLCA0NDJcbiIKCXByaW50ZiAiXHRQb3J0IE9wZW5TU0g6IDIyLCA5OTdcbiIKCXByaW50ZiAiXHRTcXVpZCBQb3J0OiAzMTI4LCA4MDAwLCA4MDgwXG4iCglwcmludGYgIlx0Q3JlYXRlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiMzhwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdEV4cGlyZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjQ1cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJcHJpbnRmICJcbiIKCQoJZWxpZiBbWyAkcGlsaWggPT0gMTcgXV07dGhlbgoJZ2V0PSQoZWNobyAtZSAiJGRheXN4IiB8IHNlZCAtbiAiMjM3cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjlwIikKCWlmIFtbICRnZXQgPX4gIkZVTEwiIF1dO3RoZW4KCWNsZWFyCgliYW5uZXIKCXByaW50ZiAiXHQgICBfX19fX19fX19fX19fX19fX19fX19fX19cbiIKCXByaW50ZiAiXHQgICAgICAgICAke219U0VSVkVSIEZVTEwke3B9XG4iIAoJcHJpbnRmICJcdCR7cH0gICBbJHttfSEke3B9XSR7bX1Db2JhIExhZ2kgQmFzb2shISR7cH1bJHttfSEke3B9XVxuIgoJcHJpbnRmICJcdCR7cH0gICBfX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJZXhpdCAxCglmaQoJCglwcmludGYgIlxuXHRfX19fX19fX19fX19fX19fX19fX19fX1xuIgoJcHJpbnRmICJcdFvigKJdVXNlcm5hbWU6ICIgdXNlcgoJcmVhZCB1c2VyOwoJcHJpbnRmICJcdFvigKJdUGFzc3dvcmQ6ICIgcGFzcwoJcmVhZCBwYXNzOwoJcHJpbnRmICJcdF9fX19fX19fX19fX19fX19fX19fX19fXG5cbiIKCXNnZG8xPSQoY3VybCAtLXNpbGVudCAtWCBQT1NUIC1IICJIb3N0OiBzc2hvY2Vhbi5jb20iIFwKCS1IICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIiBcCgktSCAidXNlci1hZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgXAoJLUggInNlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZSIgXAoJLUggInNlYy1mZXRjaC11c2VyOiA/MSIgXAoJLUggImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMyIgXAoJLUggInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiIgXAoJLUggInJlZmVyZXI6IGh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci1zZ2RvMS9zaW5nYXBvcmUiIC0tdXNlci1hZ2VudCAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IFJlZG1pIDZBKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzcuMC4zODY1LjExNiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIgLS11cmwgImh0dHBzOi8vc3Nob2NlYW4uY29tL2NyZWF0ZS1hY2NvdW50LXNlcnZlci03MTIvYW1lcmljYSIpCgljb2RlPSQoZWNobyAtZSAic2dkbzEiIHwgZ3JlcCAtYSAibmFtZT1cImNvZGUiIHwgY3V0IC1kICciJyAtZjYpCglzZ2RvMT0kKGN1cmwgLS1zaWxlbnQgLVggUE9TVCAtSCAiSG9zdDogc3Nob2NlYW4uY29tIiBcCgktSCAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMSIgXAoJLUggInVzZXItYWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIFwKCS1IICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiIFwKCS1IICJzZWMtZmV0Y2gtdXNlcjogPzEiIFwKCS1IICJhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiIFwKCS1IICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iIFwKCS1IICJyZWZlcmVyOiBodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItc2dkbzEvc2luZ2Fwb3JlIiAtLXVzZXItYWdlbnQgIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA5OyBSZWRtaSA2QSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS4xMTYgTW9iaWxlIFNhZmFyaS81MzcuMzYiIC0tdXJsICJodHRwczovL3NzaG9jZWFuLmNvbS9jcmVhdGUtYWNjb3VudC1zZXJ2ZXItNzEyL2FtZXJpY2EiIC0tZGF0YSAidXNlcm5hbWU9JHVzZXImcGFzc3dvcmQ9JHBhc3MmY29kZT0kY29kZSZpbnB1dGNvZGU9JGNvZGUmc3VibWl0PSIpCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTYxcCIgfCB0ciAiPjwiICJcbiIgfCBncmVwIC1hIC1pICJzZXJ2ZXIiKQoJY2xlYXIKCWJhbm5lcgoJcHJpbnRmICJcdCRnZXRcbiIKCXByaW50ZiAiXHRVc2VybmFtZTogc3Nob2NlYW4tJHVzZXJcbiIKCXByaW50ZiAiXHRQYXNzd29yZDogJHBhc3NcbiIKCXByaW50ZiAiXHRQb3J0IFNTTC9UTFM6IDQ0MywgNDQ1XG4iCglwcmludGYgIlx0UG9ydDogODAsIDE0MywgNDQyLCA5OTdcbiIKCXByaW50ZiAiXHRQb3J0IERyb3BiZWFyOiA4MCwgMTQzLCA0NDJcbiIKCXByaW50ZiAiXHRQb3J0IE9wZW5TU0g6IDIyLCA5OTdcbiIKCXByaW50ZiAiXHRTcXVpZCBQb3J0OiAzMTI4LCA4MDAwLCA4MDgwXG4iCglwcmludGYgIlx0Q3JlYXRlZCBkYXRlOiIKCWdldD0kKGVjaG8gLWUgIiRzZ2RvMSIgfCBzZWQgLW4gIjE1MywxNTlwIiB8IHRyICI+PCIgIlxuIiB8IHNlZCAtbiAiMzhwIikKCXByaW50ZiAiJGdldFxuIgoJcHJpbnRmICJcdEV4cGlyZWQgZGF0ZToiCglnZXQ9JChlY2hvIC1lICIkc2dkbzEiIHwgc2VkIC1uICIxNTMsMTU5cCIgfCB0ciAiPjwiICJcbiIgfCBzZWQgLW4gIjQ1cCIpCglwcmludGYgIiRnZXRcbiIKCXByaW50ZiAiXHRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuIgoJcHJpbnRmICJcbiIKCQoJZWxzZSAKCXByaW50ZiAiXG4ke2h9ICAgICAgICAgICAgfiB+ICDilIwke3AxfeKIqSR7aH3ilJAke2t9KCR7bX3il6Mke3AxfV8ke2194peiJHtrfSkke2h94pSMJHtwMX3iiKkke2h94pSQICB+IH5cbiIKCXByaW50ZiAiICAgICAgICAgICAgJHtwfVske219ISR7cH1dJHttfSBwaWxpaGFuIHNhbGFoICR7cH1bJHttfSEke3B9XSR7a31cblxuIgoJc2xlZXAgMQoJc3NsMzBkYXlzCglmaQkKfQpzc2wzMGRheXM="  "${@/fv6*}" "${@^^}" |   $@   "${@~}"   "b"$'\141'"s""e""6""4"  -d   "${@,}"     )"  ${*,,}   
